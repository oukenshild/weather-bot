import os
import aiohttp
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

load_dotenv()

class WeatherBot:
    def __init__(self):
        self.bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
        self.dp = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.dp.message.register(self.cmd_start, Command("start", "help"))
        self.dp.message.register(self.handle_city_button, self.city_filter)
        self.dp.message.register(self.handle_other_cities)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ä–æ–¥–∞–º–∏
        self.city_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"), KeyboardButton(text="–°–æ—á–∏")],
                [KeyboardButton(text="–ê—Ä–∞–º–∏–ª—å"), KeyboardButton(text="–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥")],
                [KeyboardButton(text="–ú–æ–π –≥–æ—Ä–æ–¥")]  # –î–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
            ],
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥"
        )

    def city_filter(self, message: types.Message) -> bool:
        """–§–∏–ª—å—Ç—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–æ—Ä–æ–¥–æ–≤"""
        return message.text in ["–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–°–æ—á–∏", "–ê—Ä–∞–º–∏–ª—å", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥"]

    async def get_weather(self, city: str) -> str:
        """–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ OpenWeatherMap API"""
        try:
            async with aiohttp.ClientSession() as session:
                url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={os.getenv('WEATHER_API_KEY')}&units=metric&lang=ru"
                async with session.get(url) as resp:
                    data = await resp.json()
                    if resp.status != 200:
                        return f"–û—à–∏–±–∫–∞: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API')}"
                    temp = data["main"]["temp"]
                    feels_like = data["main"]["feels_like"]
                    wind = data["wind"]["speed"]
                    description = data["weather"][0]["description"]
                    return (
                        f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                        f"‚Ä¢ {description.capitalize()}\n"
                        f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                        f"‚Ä¢ –í–µ—Ç–µ—Ä: {wind} –º/—Å"
                    )
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    async def cmd_start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é:",
            reply_markup=self.city_keyboard
        )

    async def handle_city_button(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å –≥–æ—Ä–æ–¥–∞–º–∏"""
        try:
            weather = await self.get_weather(message.text)
            await message.answer(weather, reply_markup=self.city_keyboard)
        except Exception as e:
            await message.answer(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")

    async def handle_other_cities(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞"""
        if message.text == "–ú–æ–π –≥–æ—Ä–æ–¥":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:")
            return
        
        try:
            weather = await self.get_weather(message.text)
            await message.answer(weather, reply_markup=self.city_keyboard)
        except Exception as e:
            await message.answer(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")

    async def run(self):
        await self.dp.start_polling(self.bot)

if __name__ == "__main__":
    bot = WeatherBot()
    asyncio.run(bot.run())